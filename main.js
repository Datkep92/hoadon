// ======================= DANH S√ÅCH C·ªòT EXCEL =======================
const ALL_COLS = [
  "Hi·ªÉn th·ªã tr√™n s·ªï","H√¨nh th·ª©c b√°n h√†ng","Ph∆∞∆°ng th·ª©c thanh to√°n","Ki√™m phi·∫øu xu·∫•t kho",
  "XK v√†o khu phi thu·∫ø quan v√† c√°c TH ƒë∆∞·ª£c coi nh∆∞ XK","L·∫≠p k√®m h√≥a ƒë∆°n","ƒê√£ l·∫≠p h√≥a ƒë∆°n",
  "Ng√†y h·∫°ch to√°n (*)","Ng√†y ch·ª©ng t·ª´ (*)","S·ªë ch·ª©ng t·ª´ (*)","S·ªë phi·∫øu xu·∫•t","L√Ω do xu·∫•t",
  "S·ªë h√≥a ƒë∆°n","Ng√†y h√≥a ƒë∆°n","M√£ kh√°ch h√†ng","T√™n kh√°ch h√†ng","ƒê·ªãa ch·ªâ","M√£ s·ªë thu·∫ø","Di·ªÖn gi·∫£i",
  "N·ªôp v√†o TK","NV b√°n h√†ng","M√£ h√†ng (*)","T√™n h√†ng","H√†ng khuy·∫øn m·∫°i","TK Ti·ªÅn/Chi ph√≠/N·ª£ (*)",
  "TK Doanh thu/C√≥ (*)","ƒêVT","S·ªë l∆∞·ª£ng","ƒê∆°n gi√° sau thu·∫ø","ƒê∆°n gi√°","Th√†nh ti·ªÅn","T·ª∑ l·ªá CK (%)",
  "Ti·ªÅn chi·∫øt kh·∫•u","TK chi·∫øt kh·∫•u","Gi√° t√≠nh thu·∫ø XK","% thu·∫ø XK","Ti·ªÅn thu·∫ø XK","TK thu·∫ø XK",
  "% thu·∫ø GTGT","T·ª∑ l·ªá t√≠nh thu·∫ø (Thu·∫ø su·∫•t KHAC)","Ti·ªÅn thu·∫ø GTGT","TK thu·∫ø GTGT",
  "HH kh√¥ng TH tr√™n t·ªù khai thu·∫ø GTGT","Kho","TK gi√° v·ªën","TK Kho","ƒê∆°n gi√° v·ªën","Ti·ªÅn v·ªën",
  "H√†ng h√≥a gi·ªØ h·ªô/b√°n h·ªô"
];

// ======================= BI·∫æN L∆ØU (GI·ªÆ NGUY√äN) =======================
const xmlRows = [];
const seenInvoiceKeys = new Set();

// ======================= BI·∫æN L∆ØU B·ªî SUNG (HKD = NG∆Ø·ªúI B√ÅN) =======================
const sellers = {};   // { mst: { name, rows: [] } }
const sellerOrder = [];
let currentSeller = null;

// ======================= FLATTEN XML (GI·ªÆ NGUY√äN) =======================
function flattenXml(xmlText) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(xmlText, "text/xml");
  const map = {};
  function walk(node, path) {
    const children = Array.from(node.children || []);
    if (children.length === 0) {
      const text = (node.textContent || "").trim();
      if (text) map[path] = text;
      return;
    }
    const counter = {};
    for (const child of children) {
      const name = child.nodeName;
      counter[name] = (counter[name] || 0) + 1;
      const idx = counter[name];
      const hasMany = children.filter(n => n.nodeName === name).length > 1;
      const childPath = `${path}.${name}${hasMany ? `[${idx}]` : ""}`;
      walk(child, childPath);
    }
  }
  walk(doc.documentElement, doc.documentElement.nodeName);
  return map;
}

// ======================= MAP C·ªòT ‚Üî XML (GI·ªÆ NGUY√äN) =======================
const XML_MAPPING = {
  "Ng√†y h·∫°ch to√°n (*)": "HDon.DLHDon.TTChung.NLap",
  "Ng√†y ch·ª©ng t·ª´ (*)": "HDon.DLHDon.TTChung.NLap",
  "Ng√†y h√≥a ƒë∆°n": "HDon.DLHDon.TTChung.NLap",
  "S·ªë ch·ª©ng t·ª´ (*)": "HDon.DLHDon.TTChung.SHDon",
  "S·ªë phi·∫øu xu·∫•t": "HDon.DLHDon.TTChung.SHDon",
  "S·ªë h√≥a ƒë∆°n": "HDon.DLHDon.TTChung.SHDon",
  "T√™n kh√°ch h√†ng": "HDon.DLHDon.NDHDon.NMua.Ten",
  "M√£ s·ªë thu·∫ø": "HDon.DLHDon.NDHDon.NMua.MST",
  "ƒê·ªãa ch·ªâ": "HDon.DLHDon.NDHDon.NMua.DChi",
  "M√£ h√†ng (*)": "HDon.DLHDon.NDHDon.DSHHDVu.HHDVu.MHHDVu",
  "T√™n h√†ng": "HDon.DLHDon.NDHDon.DSHHDVu.HHDVu.THHDVu",
  "ƒêVT": "HDon.DLHDon.NDHDon.DSHHDVu.HHDVu.DVTinh",
  "S·ªë l∆∞·ª£ng": "HDon.DLHDon.NDHDon.DSHHDVu.HHDVu.SLuong",
  "ƒê∆°n gi√°": "HDon.DLHDon.NDHDon.DSHHDVu.HHDVu.DGia",
  "Th√†nh ti·ªÅn": "HDon.DLHDon.NDHDon.DSHHDVu.HHDVu.ThTien",
  "% thu·∫ø GTGT": "HDon.DLHDon.NDHDon.DSHHDVu.HHDVu.TSuat",
  "Ti·ªÅn thu·∫ø GTGT": "HDon.DLHDon.NDHDon.TToan.THTTLTSuat.LTSuat.TThue"
};

// ======================= X·ª¨ L√ù CHU·ªñI (GI·ªÆ NGUY√äN) =======================
function stripVN(s = "") {
  return s
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d").replace(/ƒê/g, "D");
}
function removeVietnameseAccents(str) {
  return str.normalize("NFD")
    .replace(/\p{Diacritic}/gu, "")
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D");
}

// ======================= SINH M√É SP (GI·ªÆ NGUY√äN) =======================
function removeVietnameseAccents(str) {
  return str.normalize("NFD").replace(/\p{Diacritic}/gu, "")
    .replace(/ƒë/g, "d").replace(/ƒê/g, "D");
}
function generateProductCodeByName(productName) {
  if (!productName) return "";
  let clean = removeVietnameseAccents(productName.toUpperCase().trim());
  const words = clean.split(/\s+/).filter(w => w && !/^\d/.test(w) && !w.startsWith("("));
  let prefix = words.map(w => w[0]).join("");
  let numberPart = "";
  const matchNumUnit = clean.match(/(\d+[A-Z]+)/);
  if (matchNumUnit) numberPart = matchNumUnit[1];
  let bracketPart = "";
  const matchBracket = clean.match(/\(([^)]+)\)/);
  if (matchBracket) {
    const inner = matchBracket[1].trim();
    if (inner) bracketPart = "_" + inner[0];
  }
  return prefix + numberPart + bracketPart;
}

// ======================= T·∫†O M√É KH (GI·ªÆ NGUY√äN) =======================
function generateCustomerCode(name) {
  if (!name) return "KH_XXX";
  const clean = removeVietnameseAccents(name.toUpperCase().trim());
  const words = clean.split(/\s+/).filter(Boolean);
  let code = words.map(w => w[0]).join("").substring(0, 5);
  return "KH_" + code.padEnd(5, "X");
}

// ======================= T·∫†O ROW (GI·ªÆ NGUY√äN) =======================
function buildRow(flatMap) {
  const row = {};
  for (const col of ALL_COLS) {
    if (XML_MAPPING[col]) {
      row[col] = flatMap[XML_MAPPING[col]] || "";
    } else {
      row[col] = "";
    }
  }
  const donGia = parseFloat(row["ƒê∆°n gi√°"] || 0);
  const thue = parseFloat((row["% thu·∫ø GTGT"] || "").replace("%","") || 0);
  row["ƒê∆°n gi√° sau thu·∫ø"] = donGia + (donGia * thue / 100);
  row["TK Kho"] = "156";
  row["TK gi√° v·ªën"] = "632";
  row["TK thu·∫ø GTGT"] = "33311";
  row["M√£ kh√°ch h√†ng"] = generateCustomerCode(row["T√™n kh√°ch h√†ng"]);
  if (!row["M√£ h√†ng (*)"]) {
    row["M√£ h√†ng (*)"] = generateProductCodeByName(row["T√™n h√†ng"]);
  }
  return row;
}

// ======================= FORMAT DATE (GI·ªÆ NGUY√äN) =======================
function formatDate(val) {
  if (!val) return "";
  const match = val.match(/^(\d{4})[-/](\d{2})[-/](\d{2})$/);
  if (match) {
    const [, y, m, d] = match;
    return `${d}/${m}/${y}`;
  }
  const match2 = val.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);
  if (match2) return val;
  return val;
}

// ======================= RENDER B·∫¢NG (GI·ªÆ NGUY√äN LOGIC, CHO PH√âP TRUY·ªÄN DANH S√ÅCH) =======================
function renderXmlTable(rowsArg) {
  const rows = Array.isArray(rowsArg) ? rowsArg : xmlRows; // n·∫øu kh√¥ng truy·ªÅn ‚Üí d√πng to√†n b·ªô
  const mainContent = document.getElementById("mainContent");
  if (!mainContent) return;

  Object.assign(mainContent.style, {
    display: "flex",
    flexDirection: "column",
    height: "calc(100vh - 120px)",
    overflow: "hidden",
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
  });

  let html = `
    <style>
      #xmlTableContainer{flex:1;overflow:auto;border:1px solid #e0e0e0;border-radius:4px;background:white;}
      #xmlTable{border-collapse:collapse;min-width:1200px;width:100%;font-size:13px;}
      #xmlTable thead th{border:1px solid #d0d0d0;background:#f0f5ff;position:sticky;top:0;z-index:2;font-weight:600;white-space:nowrap;padding:10px 8px;color:#2c3e50;font-size:14px;box-shadow:0 1px 3px rgba(0,0,0,0.05);}
      #xmlTable tbody td{border:1px solid #e8e8e8;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;vertical-align:middle;padding:6px 8px;height:28px;max-height:28px;line-height:1.3;}
      #xmlTable tbody tr{transition:background-color 0.15s;}
      #xmlTable tbody tr:hover{background-color:#f8f9fa;}
      #xmlTable tbody tr:nth-child(even){background-color:#f9f9f9;}
      #xmlTable tbody tr:nth-child(even):hover{background-color:#f0f4f8;}
      .table-header{margin:10px 0 12px 0;font-size:18px;font-weight:600;color:#2c3e50;padding-bottom:8px;border-bottom:2px solid #eaeaea;}
    </style>
    <div class="table-header">üìÑ B·∫£ng t·ªïng h·ª£p h√≥a ƒë∆°n xu·∫•t h√†ng ${rows===xmlRows?"":"‚Äî l·ªçc theo HKD"}</div>
    <div id="xmlTableContainer">
      <table id="xmlTable">
        <thead><tr>
          ${ALL_COLS.map(c => `<th>${c}</th>`).join("")}
        </tr></thead>
        <button onclick="exportCurrentTable()">üì§ Xu·∫•t Excel</button>

        <tbody>
  `;

  rows.forEach((row, rIdx) => {
    html += "<tr>";
    ALL_COLS.forEach((col) => {
      let val = row[col] || "";
      if (["Ng√†y h·∫°ch to√°n (*)", "Ng√†y ch·ª©ng t·ª´ (*)", "Ng√†y h√≥a ƒë∆°n"].includes(col)) {
        val = formatDate(val);
      }
      html += `<td contenteditable="true" data-row="${rIdx}" data-col="${col}">${val}</td>`;
    });
    html += "</tr>";
  });

  html += "</tbody></table></div>";
  mainContent.innerHTML = html;

  // ‚úÖ Editable: c·∫≠p nh·∫≠t tr·ª±c ti·∫øp v√†o m·∫£ng ƒëang hi·ªÉn th·ªã (rows).
  // V√¨ m·ªói ph·∫ßn t·ª≠ l√† object chung v·ªõi xmlRows, ch·ªânh s·ª≠a ·ªü ƒë√¢y c≈©ng √°p v√†o d·ªØ li·ªáu g·ªëc.
  document.querySelectorAll("#xmlTable td[contenteditable]").forEach(td => {
    td.addEventListener("blur", e => {
      const rowIndex = parseInt(td.getAttribute("data-row"));
      const colName = td.getAttribute("data-col");
      let newValue = td.innerText.trim();
      if (["Ng√†y h·∫°ch to√°n (*)", "Ng√†y ch·ª©ng t·ª´ (*)", "Ng√†y h√≥a ƒë∆°n"].includes(colName)) {
        newValue = formatDate(newValue);
        td.innerText = newValue;
      }
      rows[rowIndex][colName] = newValue;
      saveXmlRows();
    });
  });
}

// ======================= DANH S√ÅCH HKD B√äN TR√ÅI (M·ªöI TH√äM) =======================
function renderSellerList() {
  const ul = document.getElementById("businessList");
  if (!ul) return;
  ul.innerHTML = "";
  sellerOrder.forEach(mst => {
    const info = sellers[mst];
    const li = document.createElement("li");
    li.classList.add("hkd-item");
    li.innerHTML = `<div><strong>${mst}</strong></div><div class="hkd-name">${info.name}</div>`;
    li.onclick = () => {
      currentSeller = mst;
      renderXmlTableForSeller(mst);
    };
    ul.appendChild(li);
  });
}

// ======================= HI·ªÇN TH·ªä B·∫¢NG KHI CLICK HKD (M·ªöI TH√äM) =======================
function renderXmlTableForSeller(mst) {
  const pack = sellers[mst];
  const rows = pack ? pack.rows : [];
  const mainContent = document.getElementById("mainContent");
  if (mainContent) {
    mainContent.innerHTML = `<h2 style="font-size:20px;font-weight:700;color:#007bff;margin:8px 0;">üè¢ ${pack?.name || mst} (${mst})</h2>`;
  }
  renderXmlTable(rows);
}

// ======================= GOM SELLER (M·ªöI TH√äM) =======================
function addRowToSeller(row) {
  const mst = row.__sellerMST || "UNKNOWN";
  const name = row.__sellerName || mst;
  if (!sellers[mst]) {
    sellers[mst] = { name, rows: [] };
    sellerOrder.push(mst);
  }
  sellers[mst].rows.push(row);
}
function rebuildSellersFromXmlRows() {
  // clear
  for (const k in sellers) delete sellers[k];
  sellerOrder.length = 0;
  // rebuild
  for (const row of xmlRows) addRowToSeller(row);
  renderSellerList();
}

// ======================= HANDLE FILES (GI·ªÆ LOGIC C≈® + GOM HKD) =======================
async function handleFiles(filesInput) {
  const files = Array.isArray(filesInput) ? filesInput : Array.from(document.getElementById("zipFile").files);

  for (const file of files) {
    if (!file.name.toLowerCase().endsWith(".xml")) {
      window.showToast?.(`‚ö†Ô∏è B·ªè qua: ${file.name}`, 2000, "info");
      continue;
    }
    try {
      const xmlText = await file.text();
      const flatMap = flattenXml(xmlText);

      // Kh√≥a duy nh·∫•t: ∆∞u ti√™n MCCQT, fallback SHDon (GI·ªÆ)
      const keyInvoice = flatMap["HDon.MCCQT"] || flatMap["HDon.DLHDon.TTChung.SHDon"] || "";
      if (!keyInvoice) {
        window.showToast?.(`‚ùå Kh√¥ng t√¨m th·∫•y MCCQT/S·ªë Hƒê trong ${file.name}`, 2000, "error");
        continue;
      }
      if (seenInvoiceKeys.has(keyInvoice)) {
        window.showToast?.(`‚ö†Ô∏è Tr√πng h√≥a ƒë∆°n: ${keyInvoice}`, 2000, "info");
        continue;
      }
      seenInvoiceKeys.add(keyInvoice);

      // T·∫°o row theo logic g·ªëc
      const row = buildRow(flatMap);

      // üëâ G·∫Øn thu·ªôc t√≠nh ·∫©n ƒë·ªÉ qu·∫£n l√Ω ng∆∞·ªùi b√°n (KH√îNG ·∫£nh h∆∞·ªüng c·ªôt hi·ªÉn th·ªã)
      row.__sellerMST  = flatMap["HDon.DLHDon.NDHDon.NBan.MST"] || "UNKNOWN";
      row.__sellerName = flatMap["HDon.DLHDon.NDHDon.NBan.Ten"] || row.__sellerMST;

      // L∆∞u v√†o t·∫≠p t·ªïng
      xmlRows.push(row);

      // Gom v√†o HKD
      addRowToSeller(row);

    } catch (err) {
      console.error("‚ùå L·ªói x·ª≠ l√Ω:", file.name, err);
      window.showToast?.(`‚ùå L·ªói file ${file.name}: ${err.message}`, 2000, "error");
    }
  }

  // Sau khi import: ch·ªâ hi·ªÉn th·ªã danh s√°ch HKD; ng∆∞·ªùi d√πng click HKD ƒë·ªÉ xem b·∫£ng
  renderSellerList();
  saveXmlRows();
}

// ======================= SAVE & LOAD (GI·ªÆ NGUY√äN, TH√äM REBUILD HKD) =======================
function saveXmlRows() {
  window.localStorage.setItem("xmlRows", JSON.stringify(xmlRows));
  window.showToast?.("üíæ ƒê√£ l∆∞u d·ªØ li·ªáu", 1500, "success");
}
function loadXmlRows() {
  const saved = window.localStorage.getItem("xmlRows");
  if (saved) {
    try {
      const data = JSON.parse(saved);
      if (Array.isArray(data)) {
        xmlRows.length = 0;
        xmlRows.push(...data);
        // rebuild danh s√°ch HKD t·ª´ d·ªØ li·ªáu ƒë√£ l∆∞u
        rebuildSellersFromXmlRows();
        window.showToast?.("üìÇ ƒê√£ t·∫£i d·ªØ li·ªáu ƒë√£ l∆∞u", 1500, "info");
      }
    } catch (e) {
      console.error("‚ùå L·ªói khi ƒë·ªçc localStorage:", e);
    }
  }
}

// ======================= CLEAR (GI·ªÆ NGUY√äN + D·ªåN SELLER) =======================
function clearXmlRows() {
  if (!confirm("‚ùì B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu ƒë√£ l∆∞u?")) return;
  xmlRows.length = 0;
  seenInvoiceKeys.clear();
  window.localStorage.removeItem("xmlRows");
  for (const k in sellers) delete sellers[k];
  sellerOrder.length = 0;
  currentSeller = null;
  renderSellerList();
  renderXmlTable([]); // hi·ªÉn th·ªã b·∫£ng tr·ªëng
  window.showToast?.("üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu", 2000, "success");
}

// ======================= INIT (GI·ªÆ NGUY√äN) =======================
document.addEventListener("DOMContentLoaded", () => {
  loadXmlRows();
  // Kh√¥ng renderXmlTable(xmlRows) ngay ‚Äî ƒë·ª£i ng∆∞·ªùi d√πng click HKD
  // N·∫øu mu·ªën t·ª± m·ªü HKD ƒë·∫ßu ti√™n sau load:
  // if (sellerOrder.length) renderXmlTableForSeller(sellerOrder[0]);

  // expose cho HTML
  window.handleFiles = handleFiles;
  window.clearXmlRows = clearXmlRows;
});

// ===== Helper lo·∫°i d·∫•u ti·∫øng Vi·ªát (tr√πng m√£ g·ªëc ‚Äì gi·ªØ nguy√™n) =====
function stripVN(s = "") {
  return s
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d").replace(/ƒê/g, "D");
}

// ===== T·∫°o M√£ kh√°ch h√†ng (b·∫£n ƒë·∫ßy ƒë·ªß nh∆∞ g·ªëc ‚Äì gi·ªØ nguy√™n) =====
function buildCustomerCode(name = "") {
  const s = stripVN(name).trim();
  if (!s) return "KH_XXXXX";
  const tokens = s.split(/\s+/);
  let acc = "";
  for (const tRaw of tokens) {
    const t = tRaw.replace(/[^A-Za-z0-9]/g, "");
    if (!t) continue;
    acc += t[0].toUpperCase();
    if (acc.length >= 5) break;
  }
  if (acc.length < 5) {
    for (const tRaw of tokens) {
      const t = tRaw.replace(/[^A-Za-z0-9]/g, "");
      for (let i = 1; i < t.length && acc.length < 5; i++) {
        acc += t[i].toUpperCase();
      }
      if (acc.length >= 5) break;
    }
  }
  if (acc.length < 5) acc = (acc + "XXXXX").slice(0, 5);
  return `KH_${acc}`;
}

// ===== T·∫°o M√£ h√†ng (b·∫£n ƒë·∫ßy ƒë·ªß nh∆∞ g·ªëc ‚Äì gi·ªØ nguy√™n) =====
function buildProductCode(productName = "") {
  const s = stripVN(productName).toLowerCase();
  if (!s) return "mhxxx";
  const words = (s.match(/[a-z]+/g) || []);
  const digits = (s.match(/\d+/) || [""])[0];
  let alpha = "";
  if (words.length) {
    let longest = words.reduce((a, b) => (b.length > a.length ? b : a), "");
    if (longest.length >= 3) alpha = longest.slice(-3);
    else {
      const join = words.join("");
      alpha = (join + "xxx").slice(0, 3);
    }
  } else {
    alpha = "mhx";
  }
  return `${alpha}${digits}`;
}
//
// ======================= XU·∫§T EXCEL =======================
function exportExcel(rows, filename = "export.xlsx") {
  if (!rows || !rows.length) {
    alert("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t Excel");
    return;
  }

  // Chu·∫©n b·ªã d·ªØ li·ªáu d·∫°ng 2D array: [header, ...rows]
  const header = ALL_COLS;
  const data = [header];
  rows.forEach(r => {
    data.push(header.map(c => r[c] || ""));
  });

  // T·∫°o worksheet & workbook
  const ws = XLSX.utils.aoa_to_sheet(data);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Data");

  // Xu·∫•t file
  XLSX.writeFile(wb, filename);
}

// ======================= N√öT XU·∫§T (CHO UI) =======================
function exportCurrentTable() {
  if (currentSeller) {
    const pack = sellers[currentSeller];
    if (pack) {
      exportExcel(pack.rows, `HKD_${currentSeller}.xlsx`);
    }
  } else {
    exportExcel(xmlRows, "AllData.xlsx");
  }
}

// Expose cho HTML
window.exportCurrentTable = exportCurrentTable;
